{"ast":null,"code":"// Language Analysis Utility\n// Tracks user's speaking patterns and style characteristics\n\nexport class LanguageAnalyzer {\n  constructor() {\n    this.wordFrequency = {};\n    this.sentenceLengths = [];\n    this.punctuationPatterns = {};\n    this.emojiUsage = {};\n    this.slangWords = new Set();\n    this.formalityScore = 0;\n    this.messageCount = 0;\n  }\n\n  // Analyze a new message and update patterns\n  analyzeMessage(message) {\n    this.messageCount++;\n\n    // Ensure slangWords is a Set (safety check for localStorage corruption)\n    if (!(this.slangWords instanceof Set)) {\n      this.slangWords = new Set(Array.isArray(this.slangWords) ? this.slangWords : []);\n    }\n\n    // Word frequency analysis\n    const words = message.toLowerCase().replace(/[^\\w\\s]/g, ' ').split(/\\s+/).filter(word => word.length > 0);\n    words.forEach(word => {\n      this.wordFrequency[word] = (this.wordFrequency[word] || 0) + 1;\n    });\n\n    // Sentence length analysis\n    const sentences = message.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    sentences.forEach(sentence => {\n      this.sentenceLengths.push(sentence.trim().split(/\\s+/).length);\n    });\n\n    // Punctuation analysis\n    const punctuation = message.match(/[.!?,;:]/g) || [];\n    punctuation.forEach(p => {\n      this.punctuationPatterns[p] = (this.punctuationPatterns[p] || 0) + 1;\n    });\n\n    // Emoji analysis\n    const emojis = message.match(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu) || [];\n    emojis.forEach(emoji => {\n      this.emojiUsage[emoji] = (this.emojiUsage[emoji] || 0) + 1;\n    });\n\n    // Slang detection\n    const slangPatterns = ['bro', 'bruh', 'fr', 'tbh', 'imo', 'btw', 'idk', 'lol', 'omg', 'wtf', 'yeet', 'slay', 'periodt', 'no cap', 'bussin', 'finna', 'gonna', 'wanna', 'fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot', 'nigga', 'fucking', 'useless', 'worthless', 'piece', 'shit'];\n    slangPatterns.forEach(slang => {\n      if (message.toLowerCase().includes(slang)) {\n        this.slangWords.add(slang);\n      }\n    });\n\n    // Formality score (0 = very casual, 100 = very formal)\n    this.updateFormalityScore(message);\n  }\n  updateFormalityScore(message) {\n    var _message$match;\n    let score = 50; // Start neutral\n\n    // Factors that make it more casual\n    if (this.slangWords.size > 0) score -= 20;\n    if (message.includes('!')) score -= 5;\n    if (message.includes('ðŸ˜Š') || message.includes('ðŸ˜Ž') || message.includes('ðŸ’€')) score -= 10;\n    if (message.includes(\"'\") && message.includes(\"'\")) score -= 5; // Contractions\n\n    // Aggressive language detection\n    const aggressiveWords = ['fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot', 'moron'];\n    const hasAggressiveLanguage = aggressiveWords.some(word => message.toLowerCase().includes(word));\n    if (hasAggressiveLanguage) score -= 30; // Very casual/aggressive\n\n    // Factors that make it more formal\n    if (message.includes('please') || message.includes('thank you')) score += 10;\n    if (message.length > 100) score += 5;\n    if (((_message$match = message.match(/[A-Z][a-z]+/g)) === null || _message$match === void 0 ? void 0 : _message$match.length) > 3) score += 5; // Proper nouns\n\n    this.formalityScore = Math.max(0, Math.min(100, score));\n  }\n\n  // Get user's most common words\n  getTopWords(count = 10) {\n    return Object.entries(this.wordFrequency).sort(([, a], [, b]) => b - a).slice(0, count).map(([word, freq]) => ({\n      word,\n      frequency: freq\n    }));\n  }\n\n  // Get average sentence length\n  getAverageSentenceLength() {\n    if (this.sentenceLengths.length === 0) return 0;\n    return this.sentenceLengths.reduce((a, b) => a + b, 0) / this.sentenceLengths.length;\n  }\n\n  // Get most used punctuation\n  getTopPunctuation() {\n    return Object.entries(this.punctuationPatterns).sort(([, a], [, b]) => b - a).slice(0, 3).map(([punct, freq]) => ({\n      punctuation: punct,\n      frequency: freq\n    }));\n  }\n\n  // Get most used emojis\n  getTopEmojis() {\n    return Object.entries(this.emojiUsage).sort(([, a], [, b]) => b - a).slice(0, 5).map(([emoji, freq]) => ({\n      emoji,\n      frequency: freq\n    }));\n  }\n\n  // Get personality summary\n  getPersonalitySummary() {\n    return {\n      messageCount: this.messageCount,\n      topWords: this.getTopWords(5),\n      averageSentenceLength: this.getAverageSentenceLength(),\n      topPunctuation: this.getTopPunctuation(),\n      topEmojis: this.getTopEmojis(),\n      slangWords: Array.from(this.slangWords),\n      formalityScore: this.formalityScore,\n      isCasual: this.formalityScore < 40,\n      isFormal: this.formalityScore > 60\n    };\n  }\n\n  // Reset all data\n  reset() {\n    this.wordFrequency = {};\n    this.sentenceLengths = [];\n    this.punctuationPatterns = {};\n    this.emojiUsage = {};\n    this.slangWords = new Set();\n    this.formalityScore = 0;\n    this.messageCount = 0;\n  }\n}","map":{"version":3,"names":["LanguageAnalyzer","constructor","wordFrequency","sentenceLengths","punctuationPatterns","emojiUsage","slangWords","Set","formalityScore","messageCount","analyzeMessage","message","Array","isArray","words","toLowerCase","replace","split","filter","word","length","forEach","sentences","s","trim","sentence","push","punctuation","match","p","emojis","emoji","slangPatterns","slang","includes","add","updateFormalityScore","_message$match","score","size","aggressiveWords","hasAggressiveLanguage","some","Math","max","min","getTopWords","count","Object","entries","sort","a","b","slice","map","freq","frequency","getAverageSentenceLength","reduce","getTopPunctuation","punct","getTopEmojis","getPersonalitySummary","topWords","averageSentenceLength","topPunctuation","topEmojis","from","isCasual","isFormal","reset"],"sources":["E:/Websites/EchoMe/src/utils/languageAnalysis.js"],"sourcesContent":["// Language Analysis Utility\r\n// Tracks user's speaking patterns and style characteristics\r\n\r\nexport class LanguageAnalyzer {\r\n  constructor() {\r\n    this.wordFrequency = {};\r\n    this.sentenceLengths = [];\r\n    this.punctuationPatterns = {};\r\n    this.emojiUsage = {};\r\n    this.slangWords = new Set();\r\n    this.formalityScore = 0;\r\n    this.messageCount = 0;\r\n  }\r\n\r\n  // Analyze a new message and update patterns\r\n  analyzeMessage(message) {\r\n    this.messageCount++;\r\n    \r\n    // Ensure slangWords is a Set (safety check for localStorage corruption)\r\n    if (!(this.slangWords instanceof Set)) {\r\n      this.slangWords = new Set(Array.isArray(this.slangWords) ? this.slangWords : []);\r\n    }\r\n    \r\n    // Word frequency analysis\r\n    const words = message.toLowerCase()\r\n      .replace(/[^\\w\\s]/g, ' ')\r\n      .split(/\\s+/)\r\n      .filter(word => word.length > 0);\r\n    \r\n    words.forEach(word => {\r\n      this.wordFrequency[word] = (this.wordFrequency[word] || 0) + 1;\r\n    });\r\n\r\n    // Sentence length analysis\r\n    const sentences = message.split(/[.!?]+/).filter(s => s.trim().length > 0);\r\n    sentences.forEach(sentence => {\r\n      this.sentenceLengths.push(sentence.trim().split(/\\s+/).length);\r\n    });\r\n\r\n    // Punctuation analysis\r\n    const punctuation = message.match(/[.!?,;:]/g) || [];\r\n    punctuation.forEach(p => {\r\n      this.punctuationPatterns[p] = (this.punctuationPatterns[p] || 0) + 1;\r\n    });\r\n\r\n    // Emoji analysis\r\n    const emojis = message.match(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu) || [];\r\n    emojis.forEach(emoji => {\r\n      this.emojiUsage[emoji] = (this.emojiUsage[emoji] || 0) + 1;\r\n    });\r\n\r\n    // Slang detection\r\n    const slangPatterns = [\r\n      'bro', 'bruh', 'fr', 'tbh', 'imo', 'btw', 'idk', 'lol', 'omg', 'wtf',\r\n      'yeet', 'slay', 'periodt', 'no cap', 'bussin', 'finna', 'gonna', 'wanna',\r\n      'fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot',\r\n      'nigga', 'fucking', 'useless', 'worthless', 'piece', 'shit'\r\n    ];\r\n    \r\n    slangPatterns.forEach(slang => {\r\n      if (message.toLowerCase().includes(slang)) {\r\n        this.slangWords.add(slang);\r\n      }\r\n    });\r\n\r\n    // Formality score (0 = very casual, 100 = very formal)\r\n    this.updateFormalityScore(message);\r\n  }\r\n\r\n  updateFormalityScore(message) {\r\n    let score = 50; // Start neutral\r\n    \r\n    // Factors that make it more casual\r\n    if (this.slangWords.size > 0) score -= 20;\r\n    if (message.includes('!')) score -= 5;\r\n    if (message.includes('ðŸ˜Š') || message.includes('ðŸ˜Ž') || message.includes('ðŸ’€')) score -= 10;\r\n    if (message.includes(\"'\") && message.includes(\"'\")) score -= 5; // Contractions\r\n    \r\n    // Aggressive language detection\r\n    const aggressiveWords = ['fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot', 'moron'];\r\n    const hasAggressiveLanguage = aggressiveWords.some(word => message.toLowerCase().includes(word));\r\n    if (hasAggressiveLanguage) score -= 30; // Very casual/aggressive\r\n    \r\n    // Factors that make it more formal\r\n    if (message.includes('please') || message.includes('thank you')) score += 10;\r\n    if (message.length > 100) score += 5;\r\n    if (message.match(/[A-Z][a-z]+/g)?.length > 3) score += 5; // Proper nouns\r\n    \r\n    this.formalityScore = Math.max(0, Math.min(100, score));\r\n  }\r\n\r\n  // Get user's most common words\r\n  getTopWords(count = 10) {\r\n    return Object.entries(this.wordFrequency)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, count)\r\n      .map(([word, freq]) => ({ word, frequency: freq }));\r\n  }\r\n\r\n  // Get average sentence length\r\n  getAverageSentenceLength() {\r\n    if (this.sentenceLengths.length === 0) return 0;\r\n    return this.sentenceLengths.reduce((a, b) => a + b, 0) / this.sentenceLengths.length;\r\n  }\r\n\r\n  // Get most used punctuation\r\n  getTopPunctuation() {\r\n    return Object.entries(this.punctuationPatterns)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 3)\r\n      .map(([punct, freq]) => ({ punctuation: punct, frequency: freq }));\r\n  }\r\n\r\n  // Get most used emojis\r\n  getTopEmojis() {\r\n    return Object.entries(this.emojiUsage)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5)\r\n      .map(([emoji, freq]) => ({ emoji, frequency: freq }));\r\n  }\r\n\r\n  // Get personality summary\r\n  getPersonalitySummary() {\r\n    return {\r\n      messageCount: this.messageCount,\r\n      topWords: this.getTopWords(5),\r\n      averageSentenceLength: this.getAverageSentenceLength(),\r\n      topPunctuation: this.getTopPunctuation(),\r\n      topEmojis: this.getTopEmojis(),\r\n      slangWords: Array.from(this.slangWords),\r\n      formalityScore: this.formalityScore,\r\n      isCasual: this.formalityScore < 40,\r\n      isFormal: this.formalityScore > 60\r\n    };\r\n  }\r\n\r\n  // Reset all data\r\n  reset() {\r\n    this.wordFrequency = {};\r\n    this.sentenceLengths = [];\r\n    this.punctuationPatterns = {};\r\n    this.emojiUsage = {};\r\n    this.slangWords = new Set();\r\n    this.formalityScore = 0;\r\n    this.messageCount = 0;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}