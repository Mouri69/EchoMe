{"ast":null,"code":"var _jsxFileName = \"E:\\\\Websites\\\\EchoMe\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatWindow from './components/ChatWindow';\nimport InputBox from './components/InputBox';\nimport ProgressBar from './components/ProgressBar';\nimport WordCloud from './components/WordCloud';\nimport AISettings from './components/AISettings';\nimport { LanguageAnalyzer } from './utils/languageAnalysis';\nimport { PersonalityEngine } from './utils/personalityEngine';\nimport { AIService } from './utils/aiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [analyzer, setAnalyzer] = useState(new LanguageAnalyzer());\n  const [personalityEngine] = useState(new PersonalityEngine());\n  const [isNightMode, setIsNightMode] = useState(false);\n  const [isRoastMode, setIsRoastMode] = useState(false);\n  const [showWordCloud, setShowWordCloud] = useState(false);\n\n  // Load messages from localStorage on mount\n  useEffect(() => {\n    const savedMessages = localStorage.getItem('echoMeMessages');\n    const savedAnalyzerData = localStorage.getItem('echoMeAnalyzer');\n    if (savedMessages) {\n      setMessages(JSON.parse(savedMessages));\n    }\n    if (savedAnalyzerData) {\n      const newAnalyzer = new LanguageAnalyzer();\n      const parsedData = JSON.parse(savedAnalyzerData);\n\n      // Restore Set objects properly\n      newAnalyzer.wordFrequency = parsedData.wordFrequency || {};\n      newAnalyzer.sentenceLengths = parsedData.sentenceLengths || [];\n      newAnalyzer.punctuationPatterns = parsedData.punctuationPatterns || {};\n      newAnalyzer.emojiUsage = parsedData.emojiUsage || {};\n      newAnalyzer.slangWords = new Set(parsedData.slangWords || []);\n      newAnalyzer.formalityScore = parsedData.formalityScore || 0;\n      newAnalyzer.messageCount = parsedData.messageCount || 0;\n      setAnalyzer(newAnalyzer);\n    }\n\n    // Check if it's night time (8 PM to 6 AM)\n    const hour = new Date().getHours();\n    setIsNightMode(hour >= 20 || hour < 6);\n  }, []);\n\n  // Save messages and analyzer data to localStorage\n  useEffect(() => {\n    localStorage.setItem('echoMeMessages', JSON.stringify(messages));\n\n    // Convert Set to array for localStorage\n    const analyzerData = {\n      wordFrequency: analyzer.wordFrequency,\n      sentenceLengths: analyzer.sentenceLengths,\n      punctuationPatterns: analyzer.punctuationPatterns,\n      emojiUsage: analyzer.emojiUsage,\n      slangWords: Array.from(analyzer.slangWords),\n      formalityScore: analyzer.formalityScore,\n      messageCount: analyzer.messageCount\n    };\n    localStorage.setItem('echoMeAnalyzer', JSON.stringify(analyzerData));\n  }, [messages, analyzer]);\n  const handleSendMessage = message => {\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: message,\n      sender: 'user',\n      timestamp: new Date().toLocaleTimeString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Analyze the message\n    const newAnalyzer = new LanguageAnalyzer();\n    Object.assign(newAnalyzer, analyzer);\n    newAnalyzer.analyzeMessage(message);\n    setAnalyzer(newAnalyzer);\n\n    // Generate response\n    setTimeout(() => {\n      const personality = newAnalyzer.getPersonalitySummary();\n      let response;\n\n      // Check for aggressive language first\n      const aggressiveWords = ['fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot', 'moron'];\n      const isAggressive = aggressiveWords.some(word => message.toLowerCase().includes(word));\n      if (isRoastMode) {\n        response = personalityEngine.generateRoastResponse(personality);\n      } else if (isAggressive) {\n        // Prioritize aggressive response over night mode\n        response = personalityEngine.generateResponse(personality, message);\n      } else if (isNightMode && personality.messageCount < 5) {\n        // Only use night mode for early messages when not aggressive\n        response = personalityEngine.generateNightResponse(personality);\n      } else {\n        // Use adaptive personality response\n        response = personalityEngine.generateResponse(personality, message);\n      }\n      const botMessage = {\n        id: Date.now() + 1,\n        text: response,\n        sender: 'bot',\n        timestamp: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    }, 500 + Math.random() * 1000); // Random delay to feel more natural\n  };\n  const resetPersonality = () => {\n    setMessages([]);\n    setAnalyzer(new LanguageAnalyzer());\n    localStorage.removeItem('echoMeMessages');\n    localStorage.removeItem('echoMeAnalyzer');\n  };\n  const exportPersonality = () => {\n    const personalityData = {\n      messages: messages,\n      analyzer: {\n        wordFrequency: analyzer.wordFrequency,\n        sentenceLengths: analyzer.sentenceLengths,\n        punctuationPatterns: analyzer.punctuationPatterns,\n        emojiUsage: analyzer.emojiUsage,\n        slangWords: Array.from(analyzer.slangWords),\n        formalityScore: analyzer.formalityScore,\n        messageCount: analyzer.messageCount\n      },\n      timestamp: new Date().toISOString(),\n      version: '1.0'\n    };\n    const dataStr = JSON.stringify(personalityData, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `echo-me-personality-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n  const importPersonality = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const data = JSON.parse(e.target.result);\n        if (data.messages && data.analyzer) {\n          setMessages(data.messages);\n          const newAnalyzer = new LanguageAnalyzer();\n          newAnalyzer.wordFrequency = data.analyzer.wordFrequency || {};\n          newAnalyzer.sentenceLengths = data.analyzer.sentenceLengths || [];\n          newAnalyzer.punctuationPatterns = data.analyzer.punctuationPatterns || {};\n          newAnalyzer.emojiUsage = data.analyzer.emojiUsage || {};\n          newAnalyzer.slangWords = new Set(data.analyzer.slangWords || []);\n          newAnalyzer.formalityScore = data.analyzer.formalityScore || 0;\n          newAnalyzer.messageCount = data.analyzer.messageCount || 0;\n          setAnalyzer(newAnalyzer);\n          alert('Personality imported successfully!');\n        } else {\n          alert('Invalid personality file format.');\n        }\n      } catch (error) {\n        alert('Error importing personality file.');\n        console.error(error);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Clear corrupted localStorage data on first load\n  useEffect(() => {\n    const savedAnalyzerData = localStorage.getItem('echoMeAnalyzer');\n    if (savedAnalyzerData) {\n      try {\n        const parsed = JSON.parse(savedAnalyzerData);\n        // If the data doesn't have the expected structure, clear it\n        if (!parsed.slangWords || !Array.isArray(parsed.slangWords)) {\n          localStorage.removeItem('echoMeAnalyzer');\n          localStorage.removeItem('echoMeMessages');\n        }\n      } catch (error) {\n        // If parsing fails, clear the corrupted data\n        localStorage.removeItem('echoMeAnalyzer');\n        localStorage.removeItem('echoMeMessages');\n      }\n    }\n  }, []);\n  const personality = analyzer.getPersonalitySummary();\n  const adaptationLevel = Math.min(100, personality.messageCount * 15); // Faster adaptation\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isNightMode ? 'night-mode' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"app-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title-icon\",\n              children: \"\\uD83E\\uDDEC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), \"Echo Me\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"app-subtitle\",\n            children: \"The more you talk, the more I learn your vibe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mode-toggle ${isNightMode ? 'active' : ''}`,\n            onClick: () => setIsNightMode(!isNightMode),\n            title: \"Toggle Night Mode\",\n            children: isNightMode ? '🌙' : '☀️'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mode-toggle ${isRoastMode ? 'active' : ''}`,\n            onClick: () => setIsRoastMode(!isRoastMode),\n            title: \"Toggle Roast Mode\",\n            children: isRoastMode ? '🔥' : '😊'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"word-cloud-toggle\",\n            onClick: () => setShowWordCloud(!showWordCloud),\n            title: \"Show Word Cloud\",\n            children: \"\\u2601\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: resetPersonality,\n            title: \"Reset Personality\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"export-button\",\n            onClick: exportPersonality,\n            title: \"Export Personality\",\n            children: \"\\uD83D\\uDCBE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"import-file\",\n            accept: \".json\",\n            onChange: importPersonality,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"import-button\",\n            onClick: () => document.getElementById('import-file').click(),\n            title: \"Import Personality\",\n            children: \"\\uD83D\\uDCC1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-section\",\n          children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n            adaptationLevel: adaptationLevel,\n            messageCount: personality.messageCount,\n            formalityScore: personality.formalityScore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: messages,\n            isNightMode: isNightMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n            onSendMessage: handleSendMessage,\n            isNightMode: isNightMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), showWordCloud && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-cloud-section\",\n          children: /*#__PURE__*/_jsxDEV(WordCloud, {\n            topWords: personality.topWords,\n            topEmojis: personality.topEmojis,\n            slangWords: personality.slangWords\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"app-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"personality-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat\",\n            children: [\"Messages: \", personality.messageCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat\",\n            children: [\"Style: \", personality.isCasual ? 'Casual' : personality.isFormal ? 'Formal' : 'Mixed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat\",\n            children: [\"Avg Length: \", personality.averageSentenceLength.toFixed(1), \" words\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Eg7rVk6T9xnHVA+L1yWOZXqPKv0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatWindow","InputBox","ProgressBar","WordCloud","AISettings","LanguageAnalyzer","PersonalityEngine","AIService","jsxDEV","_jsxDEV","App","_s","messages","setMessages","analyzer","setAnalyzer","personalityEngine","isNightMode","setIsNightMode","isRoastMode","setIsRoastMode","showWordCloud","setShowWordCloud","savedMessages","localStorage","getItem","savedAnalyzerData","JSON","parse","newAnalyzer","parsedData","wordFrequency","sentenceLengths","punctuationPatterns","emojiUsage","slangWords","Set","formalityScore","messageCount","hour","Date","getHours","setItem","stringify","analyzerData","Array","from","handleSendMessage","message","trim","userMessage","id","now","text","sender","timestamp","toLocaleTimeString","prev","Object","assign","analyzeMessage","setTimeout","personality","getPersonalitySummary","response","aggressiveWords","isAggressive","some","word","toLowerCase","includes","generateRoastResponse","generateResponse","generateNightResponse","botMessage","Math","random","resetPersonality","removeItem","exportPersonality","personalityData","toISOString","version","dataStr","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","split","click","revokeObjectURL","importPersonality","event","file","target","files","reader","FileReader","onload","e","data","result","alert","error","console","readAsText","parsed","isArray","adaptationLevel","min","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","accept","onChange","style","display","getElementById","onSendMessage","topWords","topEmojis","isCasual","isFormal","averageSentenceLength","toFixed","_c","$RefreshReg$"],"sources":["E:/Websites/EchoMe/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport InputBox from './components/InputBox';\r\nimport ProgressBar from './components/ProgressBar';\r\nimport WordCloud from './components/WordCloud';\r\nimport AISettings from './components/AISettings';\r\nimport { LanguageAnalyzer } from './utils/languageAnalysis';\r\nimport { PersonalityEngine } from './utils/personalityEngine';\r\nimport { AIService } from './utils/aiService';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [analyzer, setAnalyzer] = useState(new LanguageAnalyzer());\r\n  const [personalityEngine] = useState(new PersonalityEngine());\r\n  const [isNightMode, setIsNightMode] = useState(false);\r\n  const [isRoastMode, setIsRoastMode] = useState(false);\r\n  const [showWordCloud, setShowWordCloud] = useState(false);\r\n\r\n  // Load messages from localStorage on mount\r\n  useEffect(() => {\r\n    const savedMessages = localStorage.getItem('echoMeMessages');\r\n    const savedAnalyzerData = localStorage.getItem('echoMeAnalyzer');\r\n    \r\n    if (savedMessages) {\r\n      setMessages(JSON.parse(savedMessages));\r\n    }\r\n    \r\n    if (savedAnalyzerData) {\r\n      const newAnalyzer = new LanguageAnalyzer();\r\n      const parsedData = JSON.parse(savedAnalyzerData);\r\n      \r\n      // Restore Set objects properly\r\n      newAnalyzer.wordFrequency = parsedData.wordFrequency || {};\r\n      newAnalyzer.sentenceLengths = parsedData.sentenceLengths || [];\r\n      newAnalyzer.punctuationPatterns = parsedData.punctuationPatterns || {};\r\n      newAnalyzer.emojiUsage = parsedData.emojiUsage || {};\r\n      newAnalyzer.slangWords = new Set(parsedData.slangWords || []);\r\n      newAnalyzer.formalityScore = parsedData.formalityScore || 0;\r\n      newAnalyzer.messageCount = parsedData.messageCount || 0;\r\n      \r\n      setAnalyzer(newAnalyzer);\r\n    }\r\n\r\n    // Check if it's night time (8 PM to 6 AM)\r\n    const hour = new Date().getHours();\r\n    setIsNightMode(hour >= 20 || hour < 6);\r\n  }, []);\r\n\r\n  // Save messages and analyzer data to localStorage\r\n  useEffect(() => {\r\n    localStorage.setItem('echoMeMessages', JSON.stringify(messages));\r\n    \r\n    // Convert Set to array for localStorage\r\n    const analyzerData = {\r\n      wordFrequency: analyzer.wordFrequency,\r\n      sentenceLengths: analyzer.sentenceLengths,\r\n      punctuationPatterns: analyzer.punctuationPatterns,\r\n      emojiUsage: analyzer.emojiUsage,\r\n      slangWords: Array.from(analyzer.slangWords),\r\n      formalityScore: analyzer.formalityScore,\r\n      messageCount: analyzer.messageCount\r\n    };\r\n    \r\n    localStorage.setItem('echoMeAnalyzer', JSON.stringify(analyzerData));\r\n  }, [messages, analyzer]);\r\n\r\n  const handleSendMessage = (message) => {\r\n    if (!message.trim()) return;\r\n\r\n    // Add user message\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: message,\r\n      sender: 'user',\r\n      timestamp: new Date().toLocaleTimeString()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n\r\n    // Analyze the message\r\n    const newAnalyzer = new LanguageAnalyzer();\r\n    Object.assign(newAnalyzer, analyzer);\r\n    newAnalyzer.analyzeMessage(message);\r\n    setAnalyzer(newAnalyzer);\r\n\r\n    // Generate response\r\n    setTimeout(() => {\r\n      const personality = newAnalyzer.getPersonalitySummary();\r\n      let response;\r\n      \r\n      // Check for aggressive language first\r\n      const aggressiveWords = ['fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'dumb', 'stupid', 'idiot', 'moron'];\r\n      const isAggressive = aggressiveWords.some(word => message.toLowerCase().includes(word));\r\n      \r\n      if (isRoastMode) {\r\n        response = personalityEngine.generateRoastResponse(personality);\r\n      } else if (isAggressive) {\r\n        // Prioritize aggressive response over night mode\r\n        response = personalityEngine.generateResponse(personality, message);\r\n      } else if (isNightMode && personality.messageCount < 5) {\r\n        // Only use night mode for early messages when not aggressive\r\n        response = personalityEngine.generateNightResponse(personality);\r\n      } else {\r\n        // Use adaptive personality response\r\n        response = personalityEngine.generateResponse(personality, message);\r\n      }\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: response,\r\n        sender: 'bot',\r\n        timestamp: new Date().toLocaleTimeString()\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n    }, 500 + Math.random() * 1000); // Random delay to feel more natural\r\n  };\r\n\r\n  const resetPersonality = () => {\r\n    setMessages([]);\r\n    setAnalyzer(new LanguageAnalyzer());\r\n    localStorage.removeItem('echoMeMessages');\r\n    localStorage.removeItem('echoMeAnalyzer');\r\n  };\r\n\r\n  const exportPersonality = () => {\r\n    const personalityData = {\r\n      messages: messages,\r\n      analyzer: {\r\n        wordFrequency: analyzer.wordFrequency,\r\n        sentenceLengths: analyzer.sentenceLengths,\r\n        punctuationPatterns: analyzer.punctuationPatterns,\r\n        emojiUsage: analyzer.emojiUsage,\r\n        slangWords: Array.from(analyzer.slangWords),\r\n        formalityScore: analyzer.formalityScore,\r\n        messageCount: analyzer.messageCount\r\n      },\r\n      timestamp: new Date().toISOString(),\r\n      version: '1.0'\r\n    };\r\n    \r\n    const dataStr = JSON.stringify(personalityData, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(dataBlob);\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `echo-me-personality-${new Date().toISOString().split('T')[0]}.json`;\r\n    link.click();\r\n    \r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const importPersonality = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n    \r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = JSON.parse(e.target.result);\r\n        \r\n        if (data.messages && data.analyzer) {\r\n          setMessages(data.messages);\r\n          \r\n          const newAnalyzer = new LanguageAnalyzer();\r\n          newAnalyzer.wordFrequency = data.analyzer.wordFrequency || {};\r\n          newAnalyzer.sentenceLengths = data.analyzer.sentenceLengths || [];\r\n          newAnalyzer.punctuationPatterns = data.analyzer.punctuationPatterns || {};\r\n          newAnalyzer.emojiUsage = data.analyzer.emojiUsage || {};\r\n          newAnalyzer.slangWords = new Set(data.analyzer.slangWords || []);\r\n          newAnalyzer.formalityScore = data.analyzer.formalityScore || 0;\r\n          newAnalyzer.messageCount = data.analyzer.messageCount || 0;\r\n          \r\n          setAnalyzer(newAnalyzer);\r\n          \r\n          alert('Personality imported successfully!');\r\n        } else {\r\n          alert('Invalid personality file format.');\r\n        }\r\n      } catch (error) {\r\n        alert('Error importing personality file.');\r\n        console.error(error);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Clear corrupted localStorage data on first load\r\n  useEffect(() => {\r\n    const savedAnalyzerData = localStorage.getItem('echoMeAnalyzer');\r\n    if (savedAnalyzerData) {\r\n      try {\r\n        const parsed = JSON.parse(savedAnalyzerData);\r\n        // If the data doesn't have the expected structure, clear it\r\n        if (!parsed.slangWords || !Array.isArray(parsed.slangWords)) {\r\n          localStorage.removeItem('echoMeAnalyzer');\r\n          localStorage.removeItem('echoMeMessages');\r\n        }\r\n      } catch (error) {\r\n        // If parsing fails, clear the corrupted data\r\n        localStorage.removeItem('echoMeAnalyzer');\r\n        localStorage.removeItem('echoMeMessages');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const personality = analyzer.getPersonalitySummary();\r\n  const adaptationLevel = Math.min(100, personality.messageCount * 15); // Faster adaptation\r\n\r\n  return (\r\n    <div className={`app ${isNightMode ? 'night-mode' : ''}`}>\r\n      <div className=\"app-container\">\r\n        <header className=\"app-header\">\r\n          <div className=\"header-content\">\r\n            <h1 className=\"app-title\">\r\n              <span className=\"title-icon\">🧬</span>\r\n              Echo Me\r\n            </h1>\r\n            <p className=\"app-subtitle\">The more you talk, the more I learn your vibe</p>\r\n          </div>\r\n          \r\n          <div className=\"header-controls\">\r\n            <button \r\n              className={`mode-toggle ${isNightMode ? 'active' : ''}`}\r\n              onClick={() => setIsNightMode(!isNightMode)}\r\n              title=\"Toggle Night Mode\"\r\n            >\r\n              {isNightMode ? '🌙' : '☀️'}\r\n            </button>\r\n            \r\n            <button \r\n              className={`mode-toggle ${isRoastMode ? 'active' : ''}`}\r\n              onClick={() => setIsRoastMode(!isRoastMode)}\r\n              title=\"Toggle Roast Mode\"\r\n            >\r\n              {isRoastMode ? '🔥' : '😊'}\r\n            </button>\r\n            \r\n            <button \r\n              className=\"word-cloud-toggle\"\r\n              onClick={() => setShowWordCloud(!showWordCloud)}\r\n              title=\"Show Word Cloud\"\r\n            >\r\n              ☁️\r\n            </button>\r\n            \r\n            <button \r\n              className=\"reset-button\"\r\n              onClick={resetPersonality}\r\n              title=\"Reset Personality\"\r\n            >\r\n              🔄\r\n            </button>\r\n            \r\n            <button \r\n              className=\"export-button\"\r\n              onClick={exportPersonality}\r\n              title=\"Export Personality\"\r\n            >\r\n              💾\r\n            </button>\r\n            \r\n            <input\r\n              type=\"file\"\r\n              id=\"import-file\"\r\n              accept=\".json\"\r\n              onChange={importPersonality}\r\n              style={{ display: 'none' }}\r\n            />\r\n            <button \r\n              className=\"import-button\"\r\n              onClick={() => document.getElementById('import-file').click()}\r\n              title=\"Import Personality\"\r\n            >\r\n              📁\r\n            </button>\r\n          </div>\r\n        </header>\r\n\r\n        <div className=\"main-content\">\r\n          <div className=\"chat-section\">\r\n            <ProgressBar \r\n              adaptationLevel={adaptationLevel}\r\n              messageCount={personality.messageCount}\r\n              formalityScore={personality.formalityScore}\r\n            />\r\n            \r\n            <ChatWindow \r\n              messages={messages}\r\n              isNightMode={isNightMode}\r\n            />\r\n            \r\n            <InputBox \r\n              onSendMessage={handleSendMessage}\r\n              isNightMode={isNightMode}\r\n            />\r\n          </div>\r\n\r\n          {showWordCloud && (\r\n            <div className=\"word-cloud-section\">\r\n              <WordCloud \r\n                topWords={personality.topWords}\r\n                topEmojis={personality.topEmojis}\r\n                slangWords={personality.slangWords}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <footer className=\"app-footer\">\r\n          <div className=\"personality-stats\">\r\n            <span className=\"stat\">\r\n              Messages: {personality.messageCount}\r\n            </span>\r\n            <span className=\"stat\">\r\n              Style: {personality.isCasual ? 'Casual' : personality.isFormal ? 'Formal' : 'Mixed'}\r\n            </span>\r\n            <span className=\"stat\">\r\n              Avg Length: {personality.averageSentenceLength.toFixed(1)} words\r\n            </span>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}